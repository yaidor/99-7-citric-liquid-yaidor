package com.github.cc3002.citricjuice.turn;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class TurnTest {
  private Turn turn;

  @BeforeEach
  public void setUp(){
    turn = new Turn();
  }

  @Test
  public void testCreation(){
    assertTrue(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
    turn.isKO();
    assertFalse(turn.isStart());
    assertTrue(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
  }

  @Test
  public void transitionsTest(){
    assertTrue(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
    turn.isKO();
    assertFalse(turn.isStart());
    assertTrue(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
    turn.endRecovery();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertTrue(turn.isEnd());
    turn.start();
    assertTrue(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
    turn.notKO();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertTrue(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
    turn.playCard();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertTrue(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
    turn.move();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertTrue(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
    turn.path();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertTrue(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
    turn.backToTrack();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertTrue(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
    turn.wantFight();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertTrue(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
    turn.noFight();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertTrue(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
    turn.wantFight();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertTrue(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
    turn.fighting();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertTrue(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
    turn.dOrD();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertTrue(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
    turn.decided();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertTrue(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
    turn.endFight();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertTrue(turn.isStayPanel());
    assertFalse(turn.isEnd());
    turn.end();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertTrue(turn.isEnd());
    turn.start();
    turn.notKO();
    turn.playCard();
    turn.move();
    turn.stayPanel();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertTrue(turn.isStayPanel());
    assertFalse(turn.isEnd());
  }

  @Test
  public void noTransitionStartTest(){
    turn.start();
    turn.endRecovery();
    turn.playCard();
    turn.move();
    turn.path();
    turn.backToTrack();
    turn.wantFight();
    turn.noFight();
    turn.fighting();
    turn.dOrD();
    turn.endFight();
    turn.decided();
    turn.stayPanel();
    turn.end();
    assertTrue(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
  }
  @Test
  public void noTransitionKOTest(){
    turn.isKO();

    turn.start();
    turn.isKO();
    turn.notKO();
    turn.playCard();
    turn.move();
    turn.path();
    turn.backToTrack();
    turn.wantFight();
    turn.noFight();
    turn.fighting();
    turn.dOrD();
    turn.endFight();
    turn.decided();
    turn.stayPanel();
    turn.end();
    assertFalse(turn.isStart());
    assertTrue(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
  }

  @Test
  public void noTransitionNotKOTest() {
    turn.notKO();

    turn.start();
    turn.isKO();
    turn.notKO();
    turn.endRecovery();
    turn.move();
    turn.path();
    turn.backToTrack();
    turn.wantFight();
    turn.noFight();
    turn.fighting();
    turn.dOrD();
    turn.endFight();
    turn.decided();
    turn.stayPanel();
    turn.end();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertTrue(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
  }

  @Test
  public void noTransitionPlayCardTest() {
    turn.notKO();
    turn.playCard();

    turn.start();
    turn.isKO();
    turn.notKO();
    turn.endRecovery();
    turn.playCard();
    turn.path();
    turn.backToTrack();
    turn.wantFight();
    turn.noFight();
    turn.fighting();
    turn.dOrD();
    turn.endFight();
    turn.decided();
    turn.stayPanel();
    turn.end();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertTrue(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
  }

  @Test
  public void noTransitionMoveTest() {
    turn.notKO();
    turn.playCard();
    turn.move();

    turn.start();
    turn.isKO();
    turn.notKO();
    turn.endRecovery();
    turn.playCard();
    turn.move();
    turn.backToTrack();
    turn.noFight();
    turn.fighting();
    turn.dOrD();
    turn.endFight();
    turn.decided();
    turn.end();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertTrue(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
  }

  @Test
  public void noTransitionPathTest() {
    turn.notKO();
    turn.playCard();
    turn.move();
    turn.path();

    turn.start();
    turn.isKO();
    turn.notKO();
    turn.endRecovery();
    turn.playCard();
    turn.move();
    turn.path();
    turn.wantFight();
    turn.noFight();
    turn.fighting();
    turn.dOrD();
    turn.endFight();
    turn.decided();
    turn.stayPanel();
    turn.end();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertTrue(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
  }

  @Test
  public void noTransitionWantFightTest() {
    turn.notKO();
    turn.playCard();
    turn.move();
    turn.wantFight();

    turn.start();
    turn.isKO();
    turn.notKO();
    turn.endRecovery();
    turn.playCard();
    turn.move();
    turn.path();
    turn.backToTrack();
    turn.wantFight();
    turn.dOrD();
    turn.endFight();
    turn.decided();
    turn.stayPanel();
    turn.end();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertTrue(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
  }

  @Test
  public void noTransitionFightingTest() {
    turn.notKO();
    turn.playCard();
    turn.move();
    turn.wantFight();
    turn.fighting();

    turn.start();
    turn.isKO();
    turn.notKO();
    turn.endRecovery();
    turn.playCard();
    turn.move();
    turn.path();
    turn.backToTrack();
    turn.wantFight();
    turn.noFight();
    turn.fighting();
    turn.decided();
    turn.stayPanel();
    turn.end();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertTrue(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
  }

  @Test
  public void noTransitionDOrDTest() {
    turn.notKO();
    turn.playCard();
    turn.move();
    turn.wantFight();
    turn.fighting();
    turn.dOrD();

    turn.start();
    turn.isKO();
    turn.notKO();
    turn.endRecovery();
    turn.playCard();
    turn.move();
    turn.path();
    turn.backToTrack();
    turn.wantFight();
    turn.noFight();
    turn.fighting();
    turn.dOrD();
    turn.endFight();
    turn.stayPanel();
    turn.end();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertTrue(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertFalse(turn.isEnd());
  }

  @Test
  public void noTransitionEndFightTest() {
    turn.notKO();
    turn.playCard();
    turn.move();
    turn.wantFight();
    turn.fighting();
    turn.endFight();

    turn.start();
    turn.isKO();
    turn.notKO();
    turn.endRecovery();
    turn.playCard();
    turn.move();
    turn.path();
    turn.backToTrack();
    turn.wantFight();
    turn.noFight();
    turn.fighting();
    turn.dOrD();
    turn.endFight();
    turn.decided();
    turn.stayPanel();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertTrue(turn.isStayPanel());
    assertFalse(turn.isEnd());
  }

  @Test
  public void noTransitionStayPanelTest() {
    turn.notKO();
    turn.playCard();
    turn.move();
    turn.stayPanel();

    turn.start();
    turn.isKO();
    turn.notKO();
    turn.endRecovery();
    turn.playCard();
    turn.move();
    turn.path();
    turn.backToTrack();
    turn.wantFight();
    turn.noFight();
    turn.fighting();
    turn.dOrD();
    turn.endFight();
    turn.decided();
    turn.stayPanel();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertTrue(turn.isStayPanel());
    assertFalse(turn.isEnd());
  }
  @Test
  public void noTransitionEndTest() {
    turn.notKO();
    turn.playCard();
    turn.move();
    turn.stayPanel();
    turn.end();

    turn.isKO();
    turn.notKO();
    turn.endRecovery();
    turn.playCard();
    turn.move();
    turn.path();
    turn.backToTrack();
    turn.wantFight();
    turn.noFight();
    turn.fighting();
    turn.dOrD();
    turn.endFight();
    turn.decided();
    turn.stayPanel();
    turn.end();
    assertFalse(turn.isStart());
    assertFalse(turn.isIsKO());
    assertFalse(turn.isNotKO());
    assertFalse(turn.isPlayCard());
    assertFalse(turn.isMove());
    assertFalse(turn.isWantFight());
    assertFalse(turn.isFighting());
    assertFalse(turn.isDOrD());
    assertFalse(turn.isPath());
    assertFalse(turn.isStayPanel());
    assertTrue(turn.isEnd());
  }
}
